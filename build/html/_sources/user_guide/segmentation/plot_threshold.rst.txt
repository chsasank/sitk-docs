

.. _sphx_glr_user_guide_segmentation_plot_threshold.py:


Thresholding
============

Thresholding is the most basic form of segmentation. It simply labels the
pixels of an image based on the intensity range without respect to geometry
or connectivity.



.. code-block:: python

    # Author: Sasank Chilamkurthy
    # License: Apache
    # sphinx_gallery_thumbnail_number = 4

    import SimpleITK as sitk
    from myshow import myshow, myshow3d
    from downloaddata import fetch_data as fdata







Load Image
----------



.. code-block:: python


    img_T1 = sitk.ReadImage(
        fdata("nac-hncma-atlas2013-Slicer4Version/Data/A1_grayT1.nrrd"))

    # To visualize the labels image in RGB needs a image with 0-255 range
    img_T1_255 = sitk.Cast(sitk.RescaleIntensity(img_T1), sitk.sitkUInt8)

    size = img_T1.GetSize()
    myshow3d(img_T1_255, zslices=range(50, size[2] - 50, 20))




.. image:: /user_guide/segmentation/images/sphx_glr_plot_threshold_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Fetching nac-hncma-atlas2013-Slicer4Version/Data/A1_grayT1.nrrd


Threshold
---------
Let's pick a threshold 200 for thresholding.



.. code-block:: python


    seg = img_T1 > 200
    myshow(sitk.LabelOverlay(img_T1_255, seg), "Basic Thresholding")




.. image:: /user_guide/segmentation/images/sphx_glr_plot_threshold_002.png
    :align: center




You can also use a upper and lower threshold. 



.. code-block:: python


    seg = sitk.BinaryThreshold(img_T1,
                               lowerThreshold=100, upperThreshold=400, 
                               insideValue=1, outsideValue=0)
    myshow(sitk.LabelOverlay(img_T1_255, seg), "Binary Thresholding")




.. image:: /user_guide/segmentation/images/sphx_glr_plot_threshold_003.png
    :align: center




Otsu Thresholding
-----------------

ITK has a number of histogram based automatic thresholding filters including 
Huang, MaximumEntropy, Triangle, and the popular Otsu's method. These methods 
create a histogram then use a heuristic to determine a threshold value.

Otsu Thresholding for example, assumes that the image contains two classes 
of pixels following bi-modal histogram and calculates the optimum threshold 
separating these two classes.



.. code-block:: python


    otsu_filter = sitk.OtsuThresholdImageFilter()
    otsu_filter.SetInsideValue(0)
    otsu_filter.SetOutsideValue(1)
    seg = otsu_filter.Execute(img_T1)
    myshow(sitk.LabelOverlay(img_T1_255, seg), "Otsu Thresholding")

    print("Computed Threshold: {}".format(otsu_filter.GetThreshold()))



.. image:: /user_guide/segmentation/images/sphx_glr_plot_threshold_004.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Computed Threshold: 227.5505828857422


**Total running time of the script:** ( 0 minutes  7.697 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_threshold.py <plot_threshold.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_threshold.ipynb <plot_threshold.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
